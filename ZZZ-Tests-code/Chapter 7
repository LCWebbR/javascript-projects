//BRACKET NOTATION
let jsCreator = "Brendan Eich";
let firstInitial = jsCreator[0];
let lastInitial = jsCreator[8];

let outputStr = "JavaScript was created by somebody with initials " + 
   firstInitial + "." +
   lastInitial + ".";
//arrays start at 0
console.log(outputStr);

//unrelated test for finding realtime date and time
const now = new Date();
const day = now.getDay(); // returns a number representing the day of the week, starting with 0 for Sunday
const hours = now.getHours();
const minutes = now.getMinutes();
console.log(`Today is day ${day}. ${hours} ${minutes}`);
console.log(`Today is day ` + day);

console.log(jsCreator[-1]);
console.log(jsCreator[42]);
//STRINGS AS OBJECTS

let firstName = "Grace";
let lastName = "Hopper";

console.log(firstName, "has", firstName.length, "characters");
console.log(lastName, "has", lastName.length, "characters");

//.length shows amount of ??? in the array

let nonprofit = "LaunchCode";

console.log(nonprofit.toLowerCase());
console.log(nonprofit);

//toLowerCase converts strings into lower case
let exam = "test";
console.log(exam.toLowerCase());

//nothing bad happens when already lowercase
cityName = "Vienna";
stateName = "Virginia";
location = cityName + ", " +  stateName;

console.log(location.length);

//STRING IMMUTABILITY
let onprofit = "Launchcode";

console.log(onprofit);
onprofit[6] = "C";
console.log(onprofit);
//stays the same because string values cannot be changed but string variables can as shown below
let nprofit = "Launchcode";
nprofit = "LaunchCode";

console.log(nprofit);

//STRING METHODS

let profit = "   LaunchCode    ";

console.log(profit.trim(1).toLowerCase());
console.log(profit);

profit = profit.trim(1)
console.log(profit.toUpperCase(69))

//numbers dont seems to do much

//ENCODING CHARACTERS

let rofit = "LaunchCode";

console.log(rofit.charCodeAt(0));
console.log(rofit.charCodeAt(1));
console.log(rofit.charCodeAt(2));
console.log(rofit.charCodeAt(3));
console.log(rofit.charCodeAt(4));
console.log(rofit.charCodeAt(5));
console.log(rofit.charCodeAt(6));
console.log(rofit.charCodeAt(7));
console.log(rofit.charCodeAt(8));
console.log(rofit.charCodeAt(9));

let codes = [76, 97, 117, 110, 99, 104, 67, 111, 100, 101];

let characters = String.fromCharCode(codes[0]) + String.fromCharCode(codes[1])
                + String.fromCharCode(codes[2]) + String.fromCharCode(codes[3])
                + String.fromCharCode(codes[4]) + String.fromCharCode(codes[5])
                + String.fromCharCode(codes[6]) + String.fromCharCode(codes[7])
                + String.fromCharCode(codes[8]) + String.fromCharCode(codes[9]);

console.log(characters);

//SPECIAL CHARACTERS
console.log("A message\nbroken across lines,\n\tand indented");

console.log("The interrobang character, \u203d, combines ? and !  \u101d");

console.log("\"The dog's favorite toy is a stuffed hedgehog,\" said Chris");

//\ can be used to put quotes in quotes 

//TEMPLATE LITERALS
let name = "Jack";
let currentAge = 9;

console.log("Next year, " + name + " will be " + (currentAge + 1) + ".");

let ame = "Jack";
let urrentAge = 9;

console.log(`Next year, ${ame} will be ${urrentAge + 1}.`);

let poem = `The mind chases happiness.
The heart creates happiness.
The soul is happiness
And it spreads happiness
All-where.

â€“ Sri Chinmoy`;

console.log(poem);

let pp = `adasdsad
dsfsdfsdf \n\t
\tppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp
    asdasdsdasd`;
console.log(pp);
//back tick has different rules that allows for easier formating for strings

"sad ${pp}"
// interpolation or template literals no not work with regular quotes


